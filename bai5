import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl


food_weight = ctrl.Antecedent(np.arange(0, 1010, 10), 'food_weight')
food_type = ctrl.Antecedent(np.arange(0, 11, 1), 'food_type')
food_temperature = ctrl.Antecedent(np.arange(0, 61, 1), 'food_temperature')


cooking_time = ctrl.Consequent(np.arange(0, 21, 1), 'cooking_time')
power_level = ctrl.Consequent(np.arange(0, 101, 1), 'power_level')


food_weight['light'] = fuzz.trimf(food_weight.universe, [0, 0, 400])
food_weight['medium'] = fuzz.trimf(food_weight.universe, [200, 500, 800])
food_weight['heavy'] = fuzz.trimf(food_weight.universe, [600, 1000, 1000])

food_type['soft'] = fuzz.trimf(food_type.universe, [0, 0, 4])
food_type['medium'] = fuzz.trimf(food_type.universe, [2, 5, 8])
food_type['hard'] = fuzz.trimf(food_type.universe, [6, 10, 10])

food_temperature['cold'] = fuzz.trimf(food_temperature.universe, [0, 10, 20])
food_temperature['warm'] = fuzz.trimf(food_temperature.universe, [15, 25, 35])
food_temperature['hot'] = fuzz.trimf(food_temperature.universe, [30, 45, 60])

cooking_time['short'] = fuzz.trimf(cooking_time.universe, [0, 5, 10])
cooking_time['medium'] = fuzz.trimf(cooking_time.universe, [8, 12, 15])
cooking_time['long'] = fuzz.trimf(cooking_time.universe, [14, 18, 20])

power_level['low'] = fuzz.trimf(power_level.universe, [0, 30, 50])
power_level['medium'] = fuzz.trimf(power_level.universe, [40, 60, 80])
power_level['high'] = fuzz.trimf(power_level.universe, [70, 90, 100])


food_weight.view()
food_type.view()
food_temperature.view()
cooking_time.view()
power_level.view()


rule1 = ctrl.Rule(food_weight['light'], cooking_time['short'])
rule2 = ctrl.Rule(food_weight['medium'], cooking_time['medium'])
rule3 = ctrl.Rule(food_weight['heavy'], cooking_time['long'])

rule4 = ctrl.Rule(food_type['soft'], power_level['low'])
rule5 = ctrl.Rule(food_type['medium'], power_level['medium'])
rule6 = ctrl.Rule(food_type['hard'], power_level['high'])

rule7 = ctrl.Rule(food_temperature['cold'], cooking_time['long'])
rule8 = ctrl.Rule(food_temperature['warm'], cooking_time['medium'])
rule9 = ctrl.Rule(food_temperature['hot'], cooking_time['short'])

rule10 = ctrl.Rule(food_weight['heavy'] & food_type['hard'] & food_temperature['cold'],
                   [cooking_time['long'], power_level['high']])
rule11 = ctrl.Rule(food_weight['medium'] & food_type['soft'] & food_temperature['warm'],
                   [cooking_time['medium'], power_level['low']])
rule12 = ctrl.Rule(food_weight['light'] & food_type['medium'] & food_temperature['hot'],
                   [cooking_time['short'], power_level['medium']])


microwave_ctrl = ctrl.ControlSystem([rule1, rule2, rule3, rule4, rule5, rule6, rule7, rule8, rule9, rule10, rule11, rule12])
microwave_system = ctrl.ControlSystemSimulation(microwave_ctrl)


microwave_system.input['food_weight'] = 800
microwave_system.input['food_type'] = 9
microwave_system.input['food_temperature'] = 5


microwave_system.compute()


print(f"Thời gian nấu dự đoán: {microwave_system.output['cooking_time']:.2f} phút")
print(f"Mức công suất dự đoán: {microwave_system.output['power_level']:.2f}%")


cooking_time.view(sim=microwave_system)
power_level.view(sim=microwave_system)
